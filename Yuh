local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

-- Configuration
local FOV_RADIUS = 100 -- Radius of the FOV circle
local MAX_DISTANCE = 100 -- Maximum distance for locking onto players
local AIMLOCK_BUTTON_SIZE = UDim2.new(0, 100, 0, 50) -- Size of the toggle button

-- Variables
local lockedTarget = nil
local fovCircle = nil
local aimlockEnabled = false -- Default to disabled

-- Function to create the FOV circle
function createFOVCircle()
    local screenGui = Instance.new("ScreenGui", Players.LocalPlayer:WaitForChild("PlayerGui"))
    fovCircle = Instance.new("Frame", screenGui)
    fovCircle.Size = UDim2.new(0, FOV_RADIUS * 2, 0, FOV_RADIUS * 2)
    fovCircle.Position = UDim2.new(0.5, -FOV_RADIUS, 0.5, -FOV_RADIUS)
    fovCircle.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red color for FOV circle
    fovCircle.BackgroundTransparency = 0.5
    fovCircle.BorderSizePixel = 0
    fovCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    fovCircle.Visible = aimlockEnabled
end

-- Function to create the enable/disable button
function createToggleButton()
    local screenGui = Instance.new("ScreenGui", Players.LocalPlayer:WaitForChild("PlayerGui"))
    local button = Instance.new("TextButton", screenGui)
    button.Size = AIMLOCK_BUTTON_SIZE
    button.Position = UDim2.new(0, 10, 0.5, -AIMLOCK_BUTTON_SIZE.Y.Offset / 2)
    button.Text = "Toggle Aimlock"
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green color for the button
    button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color

    button.MouseButton1Click:Connect(function()
        aimlockEnabled = not aimlockEnabled
        fovCircle.Visible = aimlockEnabled
        print("Aimlock " .. (aimlockEnabled and "enabled" or "disabled"))
    end)
end

-- Function to get the player within the FOV circle
function getPlayerInFOV()
    local cam = workspace.CurrentCamera
    local mousePos = UIS:GetMouseLocation()
    local playersInFOV = {}

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local charPos = cam:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            local dist = (Vector2.new(charPos.X, charPos.Y) - mousePos).Magnitude

            if dist <= FOV_RADIUS then
                local distanceToPlayer = (cam.CFrame.Position - player.Character.HumanoidRootPart.Position).magnitude
                if distanceToPlayer <= MAX_DISTANCE then
                    table.insert(playersInFOV, {player = player, distance = distanceToPlayer})
                end
            end
        end
    end

    table.sort(playersInFOV, function(a, b) return a.distance < b.distance end)

    if #playersInFOV > 0 then
        return playersInFOV[1].player
    end

    return nil
end

-- Function to handle shooting
function onShoot()
    if aimlockEnabled and lockedTarget then
        local cam = workspace.CurrentCamera
        local targetPosition = lockedTarget.Character.HumanoidRootPart.Position
        cam.CFrame = CFrame.new(cam.CFrame.Position, targetPosition)
    end
end

-- Function to update aimlock
function updateAimlock()
    if aimlockEnabled and not lockedTarget then
        local target = getPlayerInFOV()
        if target then
            lockedTarget = target
            print("Locked onto player:", lockedTarget.Name)
        end
    elseif not aimlockEnabled then
        lockedTarget = nil
    end
end

-- Initialize the FOV circle and the toggle button
createFOVCircle()
createToggleButton()

-- Continuous aimlock and shooting logic
RunService.RenderStepped:Connect(function()
    updateAimlock()
    onShoot()
end)
