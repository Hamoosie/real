-- Create the FOV circle
local fovCircle = Drawing.new("Circle")
fovCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
fovCircle.Radius = 100 -- Adjust the radius as needed
fovCircle.Thickness = 2
fovCircle.Color = Color3.new(1, 0, 0) -- Red color
fovCircle.Filled = false
fovCircle.Visible = true

-- Function to get the closest player within the FOV circle
function getClosestPlayerInFOV()
    local players = game.Players:GetPlayers()
    local localPlayer = game.Players.LocalPlayer
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(players) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local screenPoint = workspace.CurrentCamera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            local fovCenter = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - fovCenter).magnitude

            if distance < fovCircle.Radius and distance < shortestDistance then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end

    return closestPlayer
end

-- Function to adjust bullet direction
function silentAim()
    local target = getClosestPlayerInFOV()
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local bullet = workspace:FindFirstChild("Bullet") -- Adjust according to the game's bullet object
        if bullet then
            bullet.CFrame = CFrame.new(bullet.Position, target.Character.HumanoidRootPart.Position)
        end
    end
end

-- Listen for when a bullet is fired
workspace.ChildAdded:Connect(function(child)
    if child.Name == "Bullet" then -- Adjust according to the game's bullet object
        silentAim()
    end
end)
