local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local workspace = game:GetService("Workspace")

-- Tool name
local TOOL_NAME = "AimlockTool"
local MAX_DISTANCE = 100 -- Maximum distance for locking onto players

-- Variables for the locked target and tool management
local lockedTarget = nil
local aimlockTool = nil
local aimlockEnabled = false

-- Function to create a new aimlock tool
function createAimlockTool()
    local tool = Instance.new("Tool")
    tool.Name = TOOL_NAME
    tool.RequiresHandle = true
    tool.CanBeDropped = false
    
    local handle = Instance.new("Part")
    handle.Name = "Handle"
    handle.Size = Vector3.new(1, 1, 1) -- Adjust size as needed
    handle.Anchored = false
    handle.CanCollide = false
    handle.Parent = tool
    
    tool.Parent = Players.LocalPlayer.Backpack
    print("Tool created and added to backpack.")
    return tool
end

-- Function to get the player at the touch position
function getPlayerAtTouch(touchPosition)
    local mouse = Players.LocalPlayer:GetMouse()
    local ray = workspace.CurrentCamera:ScreenPointToRay(touchPosition.X, touchPosition.Y)
    local target, position = workspace:FindPartOnRay(ray, workspace)
    
    if target and target.Parent and target.Parent:FindFirstChild("Humanoid") then
        local character = target.Parent
        local distance = (workspace.CurrentCamera.CFrame.Position - character.HumanoidRootPart.Position).magnitude
        if distance <= MAX_DISTANCE then
            return Players:GetPlayerFromCharacter(character)
        end
    end
    return nil
end

-- Function to lock onto a player
function lockOnToPlayer(player)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        lockedTarget = player
    end
end

-- Function to clear the locked target
function clearLock()
    lockedTarget = nil
end

-- Handle touch and mouse input
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        if aimlockTool then
            if aimlockEnabled then
                local player
                if input.UserInputType == Enum.UserInputType.Touch then
                    player = getPlayerAtTouch(input.Position)
                else
                    player = getPlayerAtTouch(Players.LocalPlayer:GetMouse().Hit.Position)
                end
                if player then
                    lockOnToPlayer(player)
                    print("Locked onto player:", player.Name)
                else
                    print("No player found within distance at touch position.")
                end
            end
        end
    end
end)

-- Handle clearing the lock
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton2 then
        if aimlockTool then
            if lockedTarget then
                clearLock()
                print("Lock cleared.")
            end
        end
    end
end)

-- Function to adjust aiming direction with prediction
function aimlock()
    if lockedTarget and lockedTarget.Character and lockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local cam = workspace.CurrentCamera
        local targetPos = lockedTarget.Character.HumanoidRootPart.Position
        local predictedPos = targetPos -- Add prediction logic here if needed
        cam.CFrame = CFrame.new(cam.CFrame.Position, predictedPos)
    end
end

-- Initialize the tool and aimlock
aimlockTool = Players.LocalPlayer.Backpack:FindFirstChild(TOOL_NAME)
if not aimlockTool then
    print("Tool not found in backpack, creating...")
    aimlockTool = createAimlockTool()
else
    print("Tool found in backpack.")
end

-- Continuous aimlock
RunService.RenderStepped:Connect(function()
    aimlock()
end)
